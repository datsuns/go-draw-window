// Code generated by 'go generate'; DO NOT EDIT.

package main

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return nil
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	moduser32 = windows.NewLazySystemDLL("user32.dll")
	modgdi32  = windows.NewLazySystemDLL("gdi32.dll")

	procGetDC            = moduser32.NewProc("GetDC")
	procReleaseDC        = moduser32.NewProc("ReleaseDC")
	procBeginPaint       = moduser32.NewProc("BeginPaint")
	procEndPaint         = moduser32.NewProc("EndPaint")
	procGetDesktopWindow = moduser32.NewProc("GetDesktopWindow")
	procLineTo           = modgdi32.NewProc("LineTo")
	procMoveToEx         = modgdi32.NewProc("MoveToEx")
)

func GetDC(hwnd syscall.Handle) (hdc syscall.Handle, err error) {
	r0, _, e1 := syscall.Syscall(procGetDC.Addr(), 1, uintptr(hwnd), 0, 0)
	hdc = syscall.Handle(r0)
	if hdc == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func ReleaseDC(hwnd syscall.Handle, hdc syscall.Handle) (succeeded int, err error) {
	r0, _, e1 := syscall.Syscall(procReleaseDC.Addr(), 2, uintptr(hwnd), uintptr(hdc), 0)
	succeeded = int(r0)
	if succeeded == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func BeginPaint(hwnd syscall.Handle, lpPaint *PAINTSTRUCT) (hdc syscall.Handle, err error) {
	r0, _, e1 := syscall.Syscall(procBeginPaint.Addr(), 2, uintptr(hwnd), uintptr(unsafe.Pointer(lpPaint)), 0)
	hdc = syscall.Handle(r0)
	if hdc == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func EndPaint(hwnd syscall.Handle, lpPaint *PAINTSTRUCT) (succeeded int, err error) {
	r0, _, e1 := syscall.Syscall(procEndPaint.Addr(), 2, uintptr(hwnd), uintptr(unsafe.Pointer(lpPaint)), 0)
	succeeded = int(r0)
	if succeeded == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func GetDesktopWindow() (hwnd syscall.Handle, err error) {
	r0, _, e1 := syscall.Syscall(procGetDesktopWindow.Addr(), 0, 0, 0, 0)
	hwnd = syscall.Handle(r0)
	if hwnd == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func LineTo(hwnd syscall.Handle, x int32, y int32) (succeeded int, err error) {
	r0, _, e1 := syscall.Syscall(procLineTo.Addr(), 3, uintptr(hwnd), uintptr(x), uintptr(y))
	succeeded = int(r0)
	if succeeded == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func MoveToEx(hwnd syscall.Handle, x int32, y int32, lppt *POINT) (succeeded int, err error) {
	r0, _, e1 := syscall.Syscall6(procMoveToEx.Addr(), 4, uintptr(hwnd), uintptr(x), uintptr(y), uintptr(unsafe.Pointer(lppt)), 0, 0)
	succeeded = int(r0)
	if succeeded == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}
